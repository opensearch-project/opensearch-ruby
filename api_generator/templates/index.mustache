{{{legacy_license_header}}}
{{{generated_code_warning}}}

# frozen_string_literal: true

require 'opensearch/api/namespace/common'
require 'opensearch/api/utils'
require 'opensearch/api/actions/params_registry'

Dir[File.expand_path('api/actions/**/params_registry.rb', __dir__)].sort.each   { |f| require f }
Dir[File.expand_path('api/actions/**/*.rb', __dir__)].sort.each   { |f| require f }
Dir[File.expand_path('api/namespace/**/*.rb', __dir__)].sort.each { |f| require f }

module OpenSearch
  module API
    DEFAULT_SERIALIZER = MultiJson

    COMMON_PARAMS = [
      :ignore,                        # Client specific parameters
      :index, :id,                    # :index/:id
      :body,                          # Request body
      :node_id,                       # Cluster
      :name,                          # Alias, template, settings, warmer, ...
      :field                          # Get field mapping
    ]

    COMMON_QUERY_PARAMS = [
      :ignore,                        # Client specific parameters
      :format,                        # Search, Cat, ...
      :pretty,                        # Pretty-print the response
      :human,                         # Return numeric values in human readable format
      :filter_path,                   # Filter the JSON response
      :opaque_id                      # Use X-Opaque-Id
    ]

    HTTP_GET          = 'GET'
    HTTP_HEAD         = 'HEAD'
    HTTP_PATCH        = 'PATCH'
    HTTP_POST         = 'POST'
    HTTP_PUT          = 'PUT'
    HTTP_DELETE       = 'DELETE'

    UNDERSCORE_SEARCH = '_search'
    UNDERSCORE_ALL    = '_all'
    DEFAULT_DOC       = '_doc'

    # Auto-include all namespaces in the receiver
    def self.included(base)
      base.send :include,
                OpenSearch::API::Common,
                OpenSearch::API::Actions,
                {{#namespace_modules}}
                {{name}}{{comma}}
                {{/namespace_modules}}
    end

    # The serializer class
    def self.serializer
      settings[:serializer] || DEFAULT_SERIALIZER
    end

    # Access the module settings
    def self.settings
      @settings ||= {}
    end
  end
end
